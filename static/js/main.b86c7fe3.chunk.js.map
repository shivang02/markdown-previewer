{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChange","e","setState","value","target","addBreaks","breaks","state","previewMarkdown","data","rawMarkup","marked","__html","DOMPurify","sanitize","this","className","type","checked","onClick","id","for","autoFocus","onChange","dangerouslySetInnerHTML","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gSA4EeA,E,kDArEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA2BRC,aAAc,SAACC,GACb,EAAKC,SAAS,CACZC,MAAOF,EAAEG,OAAOD,SA9BD,EAkCnBE,UAAW,WACT,EAAKH,SAAS,CACZI,QAAQ,EAAKC,MAAMD,UApCJ,EAwCnBE,gBAAkB,WAChB,IAAIC,EAAO,EAAKF,MAAMJ,MAClBO,EAAYC,IAAOF,EAAM,CAACH,OAAO,EAAKC,MAAMD,SAEhD,MAAO,CAAEM,OADSC,IAAUC,SAASJ,KAxCrC,EAAKH,MAAQ,CACXJ,MAAM,GACLG,QAAO,GALO,E,gEAUjBS,KAAKb,SAAS,CACZC,MAAM,sY,+BAqCR,OACE,yBAAKa,UAAU,OACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,SACX,kDACA,gHAEF,yBAAKA,UAAU,WACb,2BAAOC,KAAK,WAAWC,QAASH,KAAKR,MAAMD,OAAQa,QAASJ,KAAKV,UAAWe,GAAG,eAC/E,2BAAOC,IAAI,cAAX,eAEF,yBAAKL,UAAU,eACb,8BAAUM,UAAU,OAAON,UAAU,sBAAsBb,MAAOY,KAAKR,MAAMJ,MAAOoB,SAAUR,KAAKf,eACnG,yBAAKgB,UAAU,wBAAwBQ,wBAAyBT,KAAKP,2B,GA9D/DiB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b86c7fe3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport marked from 'marked'\nimport DOMPurify from 'dompurify';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      value: ``,\n       breaks:true\n    }\n  }\n  componentDidMount() {\n\n    this.setState({\n      value: \n`> This is a Blockquote\n# This is a Heading\n## A Sub Heading\n**This text is bold**\n1. This is Item number 1\n2. Item number 2\n  2.1 Item number 2.1\n3. Item number 3\n  - Unordered list item\n\n[A link!]('https://google.com')\n\n![An image of Strepera fuliginosa](https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/Strepera_fuliginosa_4.jpg/64px-Strepera_fuliginosa_4.jpg)`\n    })\n  }\n\n  handleChange= (e) =>{\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  addBreaks =() =>{\n    this.setState({\n      breaks:!this.state.breaks\n    })\n  }\n\n  previewMarkdown = () =>{\n    let data = this.state.value\n    let rawMarkup = marked(data, {breaks:this.state.breaks});\n    let cleanMarkup = DOMPurify.sanitize(rawMarkup);\n    return { __html: cleanMarkup };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n        <div className=\"title\" >\n            <h1>MarkDown Previewer</h1>\n            <p>Just start typing Markdown syntax in the left area and see results on the right!</p>\n        </div>\n          <div className=\"options\">\n            <input type=\"checkbox\" checked={this.state.breaks} onClick={this.addBreaks} id=\"add-breaks\" />\n            <label for=\"add-breaks\">Add Breaks</label>\n          </div>\n          <div className=\"play-ground\">\n            <textarea autoFocus=\"true\" className=\"input-box area-view\" value={this.state.value} onChange={this.handleChange}/>\n            <div className=\"preview-box area-view\" dangerouslySetInnerHTML={this.previewMarkdown()}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}